AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EC2 SSH IAM
Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Description: The VPC the EC2 instance is launched into.
  Subnet:
    Type: 'AWS::EC2::Subnet::Id'
    Description: The subnet the EC2 instance is launched into.
  SecurityGroup:
    Description: The security group the EC2 is launched into.
    Type: 'AWS::EC2::SecurityGroup::Id'
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-cacbbea5
    eu-west-3:
      AMI: ami-8ee056f3
    eu-west-2:
      AMI: ami-403e2524
    eu-west-1:
      AMI: ami-d41d58a7
    ap-northeast-2:
      AMI: ami-a04297ce
    ap-northeast-1:
      AMI: ami-1a15c77b
    sa-east-1:
      AMI: ami-b777e4db
    ca-central-1:
      AMI: ami-a954d1cd
    ap-southeast-1:
      AMI: ami-7243e611
    ap-southeast-2:
      AMI: ami-55d4e436
    eu-central-1:
      AMI: ami-0044b96f
    us-east-1:
      AMI: ami-c481fad3
    us-east-2:
      AMI: ami-71ca9114
    us-west-1:
      AMI: ami-de347abe
    us-west-2:
      AMI: ami-b04e92d0
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
Resources:
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref Role
  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: iam
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'iam:ListUsers'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:ListSSHPublicKeys'
                  - 'iam:GetSSHPublicKey'
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /opt/authorized_keys_command.sh:
              content: >
                #!/bin/bash -e

                if [ -z "$1" ]; then
                  exit 1
                fi

                SaveUserName="$1"
                SaveUserName=${SaveUserName//"+"/".plus."}
                SaveUserName=${SaveUserName//"="/".equal."}
                SaveUserName=${SaveUserName//","/".comma."}
                SaveUserName=${SaveUserName//"@"/".at."}

                aws iam list-ssh-public-keys --user-name "$SaveUserName" --query
                "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output
                text | while read KeyId; do
                  aws iam get-ssh-public-key --user-name "$SaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            /opt/import_users.sh:
              content: >
                #!/bin/bash

                  SaveUserName="<username>"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if id -u "$SaveUserName" >/dev/null 2>&1; then
                    echo "$SaveUserName exists"
                  else
                    #sudo will read each file in /etc/sudoers.d, skipping file names that end in "~" or contain a "." character to avoid causing problems with package manager or editor temporary/backup files.
                    SaveUserFileName=$(echo "$SaveUserName" | tr "." " ")
                    /usr/sbin/adduser "$SaveUserName"
		    echo "$SaveUserName ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$SaveUserFileName"
                  fi
              mode: '000755'
              owner: root
              group: root
            /etc/cron.d/import_users:
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub >
                [cfn-auto-reloader-hook]

                triggers=post.update

                path=Resources.Instance.Metadata.AWS::CloudFormation::Init

                action=/opt/aws/bin/cfn-init --verbose
                --stack=${AWS::StackName}  --region=${AWS::Region} 
                --resource=Instance

                runas=root
          commands:
            a_configure_sshd_command:
              command: >-
                sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand
                /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config
            b_configure_sshd_commanduser:
              command: >-
                sed -i 's:#AuthorizedKeysCommandUser
                nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config
            c_import_users:
              command: ./import_users.sh
              cwd: /opt
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                  - a_configure_sshd_command
                  - b_configure_sshd_commanduser
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        'Fn::Base64': !Sub >
          #!/bin/bash -x

          /opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName}
          --region=${AWS::Region} --resource=Instance

          /opt/aws/bin/cfn-signal --exit-code=$? --stack=${AWS::StackName}
          --region=${AWS::Region}  --resource=Instance
      Tags:
        - Key: Name
          Value: amzn_ec2_ssh_iam
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
Outputs:
  PublicName:
    Description: The public name of the EC2 instance.
    Value: !GetAtt Instance.PublicDnsName
